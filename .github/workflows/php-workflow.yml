name: PHP Portfolio CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, intl, zip, sqlite3, pdo_sqlite
        tools: composer:v2
        coverage: xdebug
    
    - name: Validate composer.json and composer.lock
      run: composer validate --strict || true
    
    - name: Check PHP syntax errors
      run: find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
    
    - name: PHP Code Sniffer
      run: |
        composer require --dev squizlabs/php_codesniffer || true
        ./vendor/bin/phpcs -n --standard=PSR12 --extensions=php --ignore=vendor/ . || true
    
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
    
    - name: Install stylelint
      run: |
        npm install -g stylelint stylelint-config-standard
        
    - name: Check if CSS directory exists
      run: |
        if [ -d "css" ]; then
          echo "CSS directory exists"
          ls -la css/
        else
          echo "CSS directory not found, creating sample directory"
          mkdir -p css
          echo "/* Sample CSS */" > css/style.css
        fi
    
    - name: Lint CSS
      run: stylelint "css/**/*.css" || true
    
    - name: Lint JavaScript
      run: |
        npm install eslint --save-dev || true
        npx eslint js/ || true
    
  integration:
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, intl, zip, sqlite3, pdo_sqlite
    
    - name: Create data directory
      run: |
        mkdir -p data
        chmod 755 data
    
    - name: Start PHP server
      run: |
        echo "Starting PHP server..."
        # Start server in background with output redirection for debugging
        php -S localhost:8000 > /tmp/server.log 2>&1 &
        SERVER_PID=$!
        echo "Server PID: $SERVER_PID"
        echo "Waiting for server to be ready..."
        
        # Wait for server to start with multiple checks
        for i in {1..30}; do
          if curl -s -f http://localhost:8000/ >/dev/null 2>&1; then
            echo "Server is ready after $i seconds!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Server failed to start after 30 seconds"
            echo "Server logs:"
            cat /tmp/server.log
            exit 1
          fi
          sleep 1
        done
    
    - name: Test website response
      run: |
        echo "Testing HTTP response..."
        # Test the main website response with better error handling
        if wget -q --timeout=30 --tries=3 -O /tmp/response.html http://localhost:8000/; then
          echo "Success: Website is responding!"
          # Check if response contains expected content
          if grep -q "Prakersh" /tmp/response.html; then
            echo "Success: Website content appears correct!"
          else
            echo "Warning: Website response may not contain expected content"
            head -20 /tmp/response.html
          fi
        else
          echo "Error: Website is not responding correctly"
          echo "Server logs:"
          # Try to get server logs if available
          exit 1
        fi
        
    - name: Test website is accessible
      run: |
        echo "Testing website accessibility..."
        # Use wget with timeout and multiple attempts
        if wget -q --timeout=15 --tries=2 --spider http://localhost:8000/; then
          echo "Website is accessible!"
        else
          echo "Website accessibility test failed, trying with curl..."
          if curl -s -f --max-time 15 http://localhost:8000/ >/dev/null; then
            echo "Website is accessible via curl!"
          else
            echo "Website is not accessible!"
            echo "Server logs:"
            cat /tmp/server.log || echo "No server logs available"
            exit 1
          fi
        fi
    
    - name: Test database initialization
      run: |
        echo "Testing database initialization..."
        # Remove any existing database to test fresh initialization
        rm -f data/resume.db
        if wget -q -O- http://localhost:8000/init_db.php; then
          echo "Success: Database initialization works!"
        else
          echo "Error: Database initialization failed"
          exit 1
        fi
        
        # Verify database was created
        if [ -f "data/resume.db" ]; then
          echo "Success: Database file was created!"
        else
          echo "Error: Database file was not created"
          exit 1
        fi
    
    - name: Test security - database initialization protection
      run: |
        echo "Testing security: Database init protection after database exists..."
        # Try to run init_db.php again - this should fail due to auth requirement
        if wget -q -O- http://localhost:8000/init_db.php 2>/dev/null | grep -q "Access denied"; then
          echo "Success: Database initialization is properly protected!"
        else
          echo "Warning: Database initialization security protection may not be working"
          # Don't fail the build, just warn - this is not a critical failure
        fi
    
    - name: Test security - protected admin endpoints
      run: |
        echo "Testing security: Protected admin endpoints..."
        
        # Test reset_db.php protection
        if wget -q -O- http://localhost:8000/reset_db.php 2>/dev/null | grep -q "Access denied"; then
          echo "Success: reset_db.php is properly protected!"
        else
          echo "Warning: reset_db.php protection may not be working"
        fi
        
        # Test check_theme.php protection  
        if wget -q -O- http://localhost:8000/check_theme.php 2>/dev/null | grep -q "Access denied"; then
          echo "Success: check_theme.php is properly protected!"
        else
          echo "Warning: check_theme.php protection may not be working"
        fi
        
        # Test migrate_passwords.php protection
        if wget -q -O- http://localhost:8000/migrate_passwords.php 2>/dev/null | grep -q "Access denied"; then
          echo "Success: migrate_passwords.php is properly protected!"
        else
          echo "Warning: migrate_passwords.php protection may not be working"
        fi
    
    - name: Test security - password hashing verification
      run: |
        echo "Testing security: Password hashing implementation..."
        
        # Check if database contains hashed passwords (not plain text)
        if [ -f "data/resume.db" ]; then
          # Check if passwords are hashed (bcrypt format starts with $2y$)
          PASSWORD_HASH=$(sqlite3 data/resume.db "SELECT password FROM admin_settings LIMIT 1;" 2>/dev/null || echo "")
          if [[ "$PASSWORD_HASH" == \$2y\$* ]]; then
            echo "Success: Passwords are properly hashed using bcrypt!"
          else
            echo "Warning: Password hashing verification failed - may be plain text"
            echo "Password format: ${PASSWORD_HASH:0:10}..."
          fi
        else
          echo "Info: Database not found for password hash verification"
        fi
    
    - name: Test security - admin authentication flows
      run: |
        echo "Testing security: Admin authentication flows..."
        
        # Test admin login page accessibility
        if wget -q -O /tmp/admin_login.html http://localhost:8000/admin.php; then
          if grep -q -i "login\|password" /tmp/admin_login.html; then
            echo "Success: Admin login page is accessible and contains login form!"
          else
            echo "Warning: Admin login page may not contain expected form elements"
          fi
        else
          echo "Error: Admin login page is not accessible"
          exit 1
        fi
        
        # Test invalid admin access attempts
        if curl -s -d "username=invalid&password=invalid" -X POST http://localhost:8000/admin.php | grep -q -i "invalid\|error\|denied"; then
          echo "Success: Invalid login attempts are properly rejected!"
        else
          echo "Warning: Invalid login handling may not be working correctly"
        fi
    
    - name: Test security - CSRF token implementation
      run: |
        echo "Testing security: CSRF token implementation..."
        
        # Test that admin forms contain CSRF tokens
        if wget -q -O /tmp/admin_forms.html http://localhost:8000/admin.php; then
          if grep -q "csrf_token" /tmp/admin_forms.html; then
            echo "Success: CSRF tokens are present in admin forms!"
          else
            echo "Warning: CSRF tokens may not be implemented in admin forms"
          fi
        else
          echo "Info: Could not verify CSRF token implementation"
        fi
    
    - name: Test security - input validation and sanitization
      run: |
        echo "Testing security: Input validation and sanitization..."
        
        # Test theme parameter validation with invalid theme
        RESPONSE=$(wget -q -O- "http://localhost:8000/?theme=../../../etc/passwd" 2>/dev/null || echo "")
        if [[ "$RESPONSE" == *"Access denied"* ]] || [[ "$RESPONSE" == *"Invalid"* ]] || [[ "$RESPONSE" != *"/etc/passwd"* ]]; then
          echo "Success: Invalid theme parameter is properly rejected!"
        else
          echo "Warning: Theme parameter validation may not be working"
        fi
        
        # Test XSS prevention in form inputs (basic test)
        TEST_XSS="<script>alert('xss')</script>"
        if curl -s -d "test_input=$TEST_XSS" -X POST http://localhost:8000/admin.php | grep -v "$TEST_XSS" >/dev/null; then
          echo "Success: XSS prevention appears to be working!"
        else
          echo "Warning: XSS prevention may not be properly implemented"
        fi
    
    - name: Test database protection - backup functionality
      run: |
        echo "Testing database protection: Backup functionality..."
        
        # Check if backup directory structure exists or can be created
        if [ -d "data/backups" ] || mkdir -p data/backups 2>/dev/null; then
          echo "Success: Backup directory structure is available!"
          
          # Simulate database backup creation
          if [ -f "data/resume.db" ]; then
            BACKUP_NAME="resume_backup_$(date +%Y%m%d_%H%M%S).db"
            if cp "data/resume.db" "data/backups/$BACKUP_NAME" 2>/dev/null; then
              echo "Success: Database backup can be created!"
              echo "Backup created: $BACKUP_NAME"
              
              # Verify backup file
              if [ -f "data/backups/$BACKUP_NAME" ]; then
                echo "Success: Backup file verification passed!"
              else
                echo "Error: Backup file verification failed"
              fi
            else
              echo "Warning: Database backup creation failed"
            fi
          else
            echo "Info: No database found for backup testing"
          fi
        else
          echo "Warning: Backup directory structure cannot be created"
        fi
    
    - name: Test database protection - backup rotation
      run: |
        echo "Testing database protection: Backup rotation functionality..."
        
        if [ -d "data/backups" ]; then
          # Create multiple test backup files to test rotation
          for i in {1..5}; do
            BACKUP_FILE="data/backups/test_backup_$i.db"
            echo "test backup $i" > "$BACKUP_FILE"
            # Set different timestamps to simulate chronological order
            touch -t $(date -d "$i minutes ago" +%Y%m%d%H%M) "$BACKUP_FILE" 2>/dev/null || touch "$BACKUP_FILE"
          done
          
          # Count backup files
          BACKUP_COUNT=$(ls -1 data/backups/test_backup_*.db 2>/dev/null | wc -l)
          if [ "$BACKUP_COUNT" -gt 3 ]; then
            echo "Success: Backup rotation test setup complete - $BACKUP_COUNT test files created"
            echo "Info: Backup rotation should keep only 3 most recent files"
          else
            echo "Info: Created $BACKUP_COUNT test backup files"
          fi
          
          # Clean up test files
          rm -f data/backups/test_backup_*.db
        else
          echo "Info: Backup directory not available for rotation testing"
        fi
    
    - name: Test database protection - SQL injection prevention
      run: |
        echo "Testing database protection: SQL injection prevention..."
        
        # Test SQL injection in login form
        SQL_INJECTION="admin' OR '1'='1"
        if curl -s -d "username=$SQL_INJECTION&password=test" -X POST http://localhost:8000/admin.php | grep -q -i "error\|invalid\|denied"; then
          echo "Success: SQL injection in login form is properly prevented!"
        else
          echo "Warning: SQL injection prevention may not be working in login form"
        fi
        
        # Test SQL injection in theme parameter
        SQL_INJECTION_THEME="default'; DROP TABLE admin_settings; --"
        RESPONSE=$(wget -q -O- "http://localhost:8000/?theme=$SQL_INJECTION_THEME" 2>/dev/null || echo "")
        if [[ "$RESPONSE" != *"DROP TABLE"* ]]; then
          echo "Success: SQL injection in theme parameter is properly prevented!"
        else
          echo "Warning: SQL injection prevention may not be working in theme parameter"
        fi
    
    - name: Test security - session management
      run: |
        echo "Testing security: Session management..."
        
        # Test session cookie security (basic test)
        RESPONSE=$(curl -s -I http://localhost:8000/admin.php)
        if echo "$RESPONSE" | grep -q -i "set-cookie"; then
          echo "Success: Session cookies are being set!"
          
          # Check for secure session settings (if available)
          if echo "$RESPONSE" | grep -q -i "httponly\|secure"; then
            echo "Success: Secure session flags detected!"
          else
            echo "Info: Secure session flags may not be visible in test environment"
          fi
        else
          echo "Info: Session cookie testing inconclusive in test environment"
        fi
    
    - name: Test security - information disclosure prevention
      run: |
        echo "Testing security: Information disclosure prevention..."
        
        # Test that error pages don't expose sensitive information
        ERROR_RESPONSE=$(wget -q -O- http://localhost:8000/nonexistent.php 2>/dev/null || echo "")
        if [[ "$ERROR_RESPONSE" != *"/var/www"* ]] && [[ "$ERROR_RESPONSE" != *"Fatal error"* ]]; then
          echo "Success: Error pages don't expose sensitive system paths!"
        else
          echo "Warning: Error pages may expose sensitive information"
        fi
        
        # Test that database errors don't expose schema
        if [ -f "data/resume.db" ]; then
          # Try to trigger a database error safely
          RESPONSE=$(wget -q -O- "http://localhost:8000/check_theme.php" 2>/dev/null || echo "")
          if [[ "$RESPONSE" != *"sqlite"* ]] && [[ "$RESPONSE" != *"database"* ]] && [[ "$RESPONSE" != *"table"* ]]; then
            echo "Success: Database errors don't expose schema information!"
          else
            echo "Info: Database error exposure test inconclusive"
          fi
        fi
    
    - name: Test admin page
      run: |
        echo "Testing admin page loads..."
        # Test that admin page is accessible (should show login form)
        if wget -q --timeout=15 -O /tmp/admin_response.html http://localhost:8000/admin.php; then
          echo "Success: Admin page is accessible!"
          # Check if it contains login form elements
          if grep -q -i "login\|password\|admin" /tmp/admin_response.html; then
            echo "Success: Admin page appears to have login functionality!"
          else
            echo "Warning: Admin page may not contain expected login elements"
            head -10 /tmp/admin_response.html
          fi
        else
          echo "Error: Admin page is not accessible"
          exit 1
        fi
    
  docker:
    needs: [test, lint, integration]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test Docker build with timing
      run: |
        echo "Testing Docker build process..."
        echo "Note: Docker build can take 3-4 minutes depending on system resources"
        
        # Record build start time
        BUILD_START=$(date +%s)
        
        # Build the image
        if docker build -t portfolio-test .; then
          BUILD_END=$(date +%s)
          BUILD_TIME=$((BUILD_END - BUILD_START))
          echo "Success: Docker image built in ${BUILD_TIME} seconds"
        else
          echo "Error: Docker build failed"
          exit 1
        fi
        
        # Verify image was created
        if docker images | grep -q "portfolio-test"; then
          echo "Success: Docker image created successfully"
          docker images portfolio-test
        else
          echo "Error: Docker image not found after build"
          exit 1
        fi
        
    - name: Test Docker container startup and health
      run: |
        echo "Testing Docker container startup and health monitoring..."
        
        # Start container in background with health check
        echo "Starting container..."
        docker run -d --name portfolio-test-container -p 8081:80 portfolio-test
        
        # Check if container started
        if docker ps | grep -q "portfolio-test-container"; then
          echo "Success: Container started successfully"
        else
          echo "Error: Container failed to start"
          docker logs portfolio-test-container
          exit 1
        fi
        
        # Wait for container to be healthy with better monitoring
        echo "Monitoring container health..."
        CONTAINER_HEALTHY=false
        for i in {1..60}; do
          # Check container status
          CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' portfolio-test-container)
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' portfolio-test-container 2>/dev/null || echo "none")
          
          echo "Attempt $i/60: Container Status: $CONTAINER_STATUS, Health: $HEALTH_STATUS"
          
          if [ "$CONTAINER_STATUS" = "running" ] && [ "$HEALTH_STATUS" = "healthy" ]; then
            echo "Success: Container is running and healthy after $i seconds!"
            CONTAINER_HEALTHY=true
            break
          fi
          
          if [ "$CONTAINER_STATUS" = "exited" ]; then
            echo "Error: Container exited unexpectedly"
            docker logs portfolio-test-container
            exit 1
          fi
          
          if [ $i -eq 60 ]; then
            echo "Error: Container failed to become healthy within 60 seconds"
            echo "Final status: $CONTAINER_STATUS, Health: $HEALTH_STATUS"
            docker logs portfolio-test-container
            exit 1
          fi
          
          sleep 1
        done
        
        # Additional container status verification
        echo "Final container status verification..."
        docker ps -a | grep portfolio-test-container
        
    - name: Test container functionality and endpoints
      run: |
        echo "Testing container functionality and endpoints..."
        
        # Wait additional time for PHP server to be fully ready
        echo "Waiting for PHP server to be fully ready..."
        sleep 10
        
        # Test health check endpoint (internal)
        echo "Testing container health check..."
        if docker exec portfolio-test-container curl -f http://localhost/ >/dev/null 2>&1; then
          echo "Success: Internal health check passed"
        else
          echo "Warning: Internal health check failed"
        fi
        
        # Test external connectivity
        echo "Testing external connectivity..."
        
        # Test home page with detailed response
        if curl -f -s http://localhost:8081/ > /tmp/home_response.html; then
          echo "Success: Home page is accessible!"
          if grep -q "Prakersh" /tmp/home_response.html; then
            echo "Success: Home page contains expected content"
          else
            echo "Warning: Home page may not contain expected content"
          fi
        else
          echo "Error: Home page not accessible"
          echo "Container logs:"
          docker logs portfolio-test-container
          exit 1
        fi
        
        # Test admin page with detailed response
        if curl -f -s http://localhost:8081/admin.php > /tmp/admin_response.html; then
          echo "Success: Admin page is accessible!"
          if grep -q -i "login\|admin" /tmp/admin_response.html; then
            echo "Success: Admin page contains login form"
          else
            echo "Warning: Admin page may not contain expected login form"
          fi
        else
          echo "Error: Admin page not accessible"
          echo "Container logs:"
          docker logs portfolio-test-container
          exit 1
        fi
        
        # Test database initialization in container
        echo "Testing database initialization in container..."
        if docker exec portfolio-test-container php init_db.php > /tmp/init_output.txt 2>&1; then
          echo "Success: Database initialization command executed"
          if docker exec portfolio-test-container test -f /var/www/html/data/resume.db; then
            echo "Success: Database file created in container"
          else
            echo "Warning: Database file may not have been created"
          fi
        else
          echo "Warning: Database initialization may have failed"
          cat /tmp/init_output.txt
        fi
        
        # Test additional endpoints
        echo "Testing additional endpoints..."
        
        # Test that protected endpoints return appropriate responses
        PROTECTED_RESPONSE=$(curl -s http://localhost:8081/reset_db.php)
        if echo "$PROTECTED_RESPONSE" | grep -q -i "access denied\|login\|admin"; then
          echo "Success: Protected endpoints are properly secured"
        else
          echo "Warning: Protected endpoints may not be properly secured"
        fi
        
    - name: Test container logs and error handling
      run: |
        echo "Testing container logs and error handling..."
        
        # Check container logs for errors
        echo "Checking container logs..."
        docker logs portfolio-test-container > /tmp/container_logs.txt 2>&1
        
        # Look for critical errors (but allow warnings and info)
        if grep -i "fatal\|critical\|emergency" /tmp/container_logs.txt; then
          echo "Warning: Critical errors found in container logs"
          cat /tmp/container_logs.txt
        else
          echo "Success: No critical errors found in container logs"
        fi
        
        # Check for PHP errors
        if grep -i "php fatal error\|php parse error" /tmp/container_logs.txt; then
          echo "Error: PHP errors found in container logs"
          cat /tmp/container_logs.txt
          exit 1
        else
          echo "Success: No PHP fatal errors found"
        fi
        
        # Test container restart capability
        echo "Testing container restart capability..."
        docker restart portfolio-test-container
        
        # Wait for container to be healthy again after restart
        echo "Waiting for container to be healthy after restart..."
        for i in {1..30}; do
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' portfolio-test-container 2>/dev/null || echo "none")
          if [ "$HEALTH_STATUS" = "healthy" ]; then
            echo "Success: Container is healthy after restart ($i seconds)"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Error: Container not healthy after restart"
            docker logs portfolio-test-container
            exit 1
          fi
          sleep 1
        done
        
        # Test that application still works after restart
        sleep 5
        if curl -f http://localhost:8081/ >/dev/null 2>&1; then
          echo "Success: Application accessible after container restart"
        else
          echo "Error: Application not accessible after restart"
          exit 1
        fi
        
    - name: Test container resource usage and performance
      run: |
        echo "Testing container resource usage and performance..."
        
        # Check container resource usage
        echo "Container resource usage:"
        docker stats --no-stream portfolio-test-container
        
        # Test response time
        echo "Testing response time..."
        TIME_START=$(date +%s%3N)
        curl -s http://localhost:8081/ > /dev/null
        TIME_END=$(date +%s%3N)
        RESPONSE_TIME=$((TIME_END - TIME_START))
        echo "Response time: ${RESPONSE_TIME}ms"
        
        if [ $RESPONSE_TIME -lt 5000 ]; then
          echo "Success: Response time is acceptable (${RESPONSE_TIME}ms)"
        else
          echo "Warning: Response time is slow (${RESPONSE_TIME}ms)"
        fi
        
    - name: Test build.sh script with container
      run: |
        echo "Testing build.sh script functionality with container operations..."
        
        # Stop the test container first
        docker stop portfolio-test-container
        docker rm portfolio-test-container
        
        # Test build.sh script
        chmod +x build.sh
        
        # Test help command
        echo "Testing help command..."
        if ./build.sh help | grep -q "Commands:"; then
          echo "Success: Help command works correctly"
        else
          echo "Error: Help command not working"
          exit 1
        fi
        
        # Test status command (should show no containers)
        echo "Testing status command..."
        ./build.sh status || echo "No containers running (expected)"
        
        # Test build command
        echo "Testing build command..."
        if ./build.sh build 2>&1 | grep -q "Building Docker image"; then
          echo "Success: build.sh build command works correctly"
        else
          echo "Error: build.sh build command not working"
          exit 1
        fi
        
        # Test that image was built by build.sh
        if docker images | grep -q "portfolio:latest"; then
          echo "Success: build.sh created the correct image"
        else
          echo "Error: build.sh did not create expected image"
          exit 1
        fi
        
    - name: Cleanup Docker resources
      run: |
        echo "Cleaning up Docker resources..."
        
        # Stop and remove any running containers
        docker stop portfolio-test-container 2>/dev/null || true
        docker rm portfolio-test-container 2>/dev/null || true
        
        # Remove test images
        docker rmi portfolio-test 2>/dev/null || true
        docker rmi portfolio:latest 2>/dev/null || true
        
        # Clean up any leftover docker-compose resources
        docker compose down --remove-orphans 2>/dev/null || true
        
        echo "Docker cleanup completed"

  build:
    needs: [test, lint, integration, docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create build artifact
      run: |
        echo "Creating build directory structure..."
        mkdir -p build/data
        
        echo "Copying main PHP files..."
        cp -v *.php build/ || echo "Some PHP files may be missing"
        
        echo "Copying directories..."
        [ -d "assets" ] && cp -rv assets build/ || echo "Assets directory missing"
        [ -d "css" ] && cp -rv css build/ || echo "CSS directory missing"  
        [ -d "includes" ] && cp -rv includes build/ || echo "Includes directory missing"
        [ -d "js" ] && cp -rv js build/ || echo "JS directory missing"
        
        echo "Copying documentation and config files..."
        cp -v *.md build/ || echo "Some documentation files may be missing"
        [ -f "composer.json" ] && cp -v composer.json build/ || echo "composer.json missing"
        [ -f "composer.lock" ] && cp -v composer.lock build/ || echo "composer.lock missing"
        [ -f ".htaccess" ] && cp -v .htaccess build/ || echo ".htaccess missing"
        
        echo "Copying Docker files..."
        [ -f "Dockerfile" ] && cp -v Dockerfile build/ || echo "Dockerfile missing"
        [ -f "docker-compose.yml" ] && cp -v docker-compose.yml build/ || echo "docker-compose.yml missing"
        [ -f "build.sh" ] && cp -v build.sh build/ && chmod +x build/build.sh || echo "build.sh missing"
        [ -f ".dockerignore" ] && cp -v .dockerignore build/ || echo ".dockerignore missing"
        
        echo "Setting proper permissions..."
        chmod -R 755 build/
        chmod 755 build/data
        
        echo "Build artifact contents:"
        ls -la build/
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: website-build
        path: build/
        retention-days: 7 